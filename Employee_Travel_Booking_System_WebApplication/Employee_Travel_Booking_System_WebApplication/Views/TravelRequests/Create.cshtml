@model Employee_Travel_Booking_System_WebApplication.Models.travelrequest
@{ ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_EmployeeLayout.cshtml"; }

<h2 class="text-center mb-4">Travel Request</h2>

@using (Html.BeginForm())
{
@Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />

    <div class="form-group">
        @Html.LabelFor(model => model.reasonfortravel, "Travel Reason:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.reasonfortravel, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "Enter your travel reason here" } })
            @Html.ValidationMessageFor(model => model.reasonfortravel, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.flightneeded, "Need Flight? :", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.flightneeded, new SelectList(new[] { "Yes", "No" }), "-- Select --", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.flightneeded, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.hotelneeded, "Need Hotel? :", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.hotelneeded, new SelectList(new[] { "Yes", "No" }), "-- Select --", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.hotelneeded, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("City Type:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("CityType", new SelectList(new[] { "Domestic", "International" }), "-- Select --", new { @class = "form-control", id = "cityTypeSelector", required = "required" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.departurecity, "Departure City:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.departurecity, Enumerable.Empty<SelectListItem>(), "-- Select --", new { @class = "form-control", id = "departureCitySelector", required = "required" })
            @Html.ValidationMessageFor(model => model.departurecity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.arrivalcity, "Arrival City:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.arrivalcity, Enumerable.Empty<SelectListItem>(), "-- Select --", new { @class = "form-control", id = "arrivalCitySelector", required = "required" })
            @Html.ValidationMessageFor(model => model.arrivalcity, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.departuredate, "Departure Date:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.departuredate, new { htmlAttributes = new { @class = "form-control", required = "required", id = "departuredate", placeholder = "Select departure date" } })
            @Html.ValidationMessageFor(model => model.departuredate, "", new { @class = "text-danger" })
        </div>
    </div>
    @{
        List<SelectListItem> timeOptions = new List<SelectListItem>();
        for (int i = 0; i < 24; i++)
        {
            for (int j = 0; j < 60; j += 15) // Add options every 15 minutes
            {
                timeOptions.Add(new SelectListItem
                {
                    Text = $"{i:D2}:{j:D2}",
                    Value = $"{i:D2}:{j:D2}"
                });
            }
        }
    }



    <div class="form-group">
        @Html.LabelFor(model => model.departuretime, "Departure Time:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.departuretime, timeOptions, "Select Time", new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.departuretime, "", new { @class = "text-danger" })
        </div>

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.additionalinformation, "Additional Information:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.additionalinformation, new { @class = "form-control", required = "required", placeholder = "Enter your additional details", rows = "5" })
            @Html.ValidationMessageFor(model => model.additionalinformation, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </div>
</div>}

<div class="text-center mt-3">
    @Html.ActionLink("Back to Dashboard", "Index", null, new { @class = "btn btn-info btn-sm details-btn" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script>
        $(function () {
            $("#departuredate").datepicker({
                dateFormat: "yy-mm-dd",
                minDate: 0
            });

            $("#cityTypeSelector").change(function () {
                var selectedType = $(this).val();
                var domesticCities = @Html.Raw(Json.Encode(GetDomesticCities()));
                var internationalCities = @Html.Raw(Json.Encode(GetInternationalCities()));
                var cities = selectedType === "Domestic" ? domesticCities : internationalCities;

                $("#departureCitySelector").empty().append('<option>-- Select --</option>');
                $("#arrivalCitySelector").empty().append('<option>-- Select --</option>');

                $.each(cities, function (index, city) {
                    $("#departureCitySelector").append('<option value="' + city.Value + '">' + city.Text + '</option>');
                    $("#arrivalCitySelector").append('<option value="' + city.Value + '">' + city.Text + '</option>');
                });
            });
        });
    </script>
}
@functions { public List<SelectListItem> GetDomesticCities()
            {
                return new List<SelectListItem>
            {
            new SelectListItem { Text = "Bengaluru", Value = "Bengaluru" },
            new SelectListItem { Text = "Chennai", Value = "Chennai" },
            new SelectListItem { Text = "Dehradun", Value = "Dehradun" },
            new SelectListItem { Text = "Gurugram", Value = "Gurugram" },
            new SelectListItem { Text = "Hyderabad", Value = "Hyderabad" },
            new SelectListItem { Text = "Delhi", Value = "Delhi" },
            new SelectListItem { Text = "Pune", Value = "Pune" },
            new SelectListItem { Text = "Noida", Value = "Noida" },
            new SelectListItem { Text = "Visakhapatnam", Value = "Visakhapatnam" },

            // Add more domestic cities here
        };
            }

            public List<SelectListItem> GetInternationalCities()
            {
                return new List<SelectListItem>
            {
            new SelectListItem { Text = "Chicago", Value = "Chicago" },
            new SelectListItem { Text = "Las Vegas", Value = "Las Vegas" },
            new SelectListItem { Text = "Europe", Value = "Europe" },
            new SelectListItem { Text = "Malaysia", Value = "Malaysia" },
            new SelectListItem { Text = "Singapore", Value = "Singapore" },
            new SelectListItem { Text = "Nepal", Value = "Nepal" },
            // Add more international cities here
        };
            } }
